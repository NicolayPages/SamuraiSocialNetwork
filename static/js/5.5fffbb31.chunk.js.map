{"version":3,"sources":["components/common/FormElements/FormElements.jsx","components/common/FormElements/FormElements.module.scss","utilits/validators/validators.js","components/Dialogs/Dialogs.module.scss","components/Dialogs/Dialog/Dialog.module.scss","components/Dialogs/Message/Message.module.scss","components/Dialogs/MessageForm/MessageForm.module.scss","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/MessageForm/MessageFormContainer.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.js","selectors/dialogs-selectors.ts","components/Dialogs/DialogsContainer.tsx"],"names":["Textarea","input","meta","props","hasError","touched","error","className","s","formControl","span","Input","spanInput","module","exports","required","value","maxLengthCreator","maxLength","length","Dialog","path","id","link","to","activeClassName","name","Message","message","user","icon","src","userPhoto","alt","content","text","maxLength200","MessageFormComponent","onAddMessage","values","dispatch","addMessageActionCreator","addNewMessage","reset","MessageReduxForm","onSubmit","this","React","Component","reduxForm","form","messageForm","handleSubmit","Field","component","messageArea","placeholder","validate","messageSend","compose","connect","state","newText","dialogsPage","messageNewText","Dialogs","dialogElements","dialogs","map","d","messageElements","messages","m","items","title","wrapper","mapStateToPropsForRedirect","isAuth","auth","getDialogs","getMessages","DialogsContainer","RedirectComponent"],"mappings":"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","file":"static/js/5.5fffbb31.chunk.js","sourcesContent":["import React from 'react';\r\nimport s from './FormElements.module.scss'\r\n\r\n\r\nexport const Textarea = ({ input, meta, ...props }) => {\r\n   const hasError = meta.touched && meta.error;\r\n   return (\r\n      <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n         <div><textarea {...input} {...props} /></div>\r\n         {hasError && <span className={s.span}>{meta.error}</span>}\r\n      </div>\r\n   );\r\n};\r\n\r\nexport const Input = ({ input, meta, ...props }) => {\r\n   const hasError = meta.touched && meta.error;\r\n   return (\r\n      <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n         <div><input {...input} {...props} /></div>\r\n         {hasError && <span className={s.spanInput}>{meta.error}</span>}\r\n      </div>\r\n   );\r\n};\r\n\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormElements_formControl__3KJbR\",\"error\":\"FormElements_error__1hf5q\",\"span\":\"FormElements_span__3JHKa\",\"spanInput\":\"FormElements_spanInput__1cELw\"};","export const required = value => {\r\n   if (value) return undefined;\r\n   return 'Field is required!'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => (value) => {\r\n   if (value.length > maxLength) return `Max length is ${maxLength} symbols`;\r\n   return undefined;\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1YxzG\",\"items\":\"Dialogs_items__MNeEY\",\"title\":\"Dialogs_title__1zSl8\",\"messages\":\"Dialogs_messages__YnvOH\",\"wrapper\":\"Dialogs_wrapper__3A2lt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Dialog_link__3OONQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__ylXXx\",\"user\":\"Message_user__3kYNv\",\"icon\":\"Message_icon__2_PJA\",\"name\":\"Message_name__2kCrt\",\"content\":\"Message_content__3Gdg-\",\"text\":\"Message_text__tALBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageForm\":\"MessageForm_messageForm__tG0dA\",\"messageArea\":\"MessageForm_messageArea__1wiE3\",\"messageSend\":\"MessageForm_messageSend__1tNW7\"};","import React, { Component } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.scss'\r\n\r\ntype PropsType = {\r\n   id: number\r\n   name: string\r\n}\r\n\r\nconst Dialog: React.FC<PropsType> = (props) => {\r\n   let path = \"/dialogs/\" + props.id;\r\n   return (\r\n      <li className={s.link}><NavLink to={path} activeClassName=\"selected\" >{props.name}</NavLink></li>\r\n   );\r\n}\r\n\r\nexport default Dialog;","import React, { Component } from 'react';\r\nimport s from './Message.module.scss'\r\nimport userPhoto from '../../../assets/images/user.png'\r\n\r\ntype PropsType = {\r\n   name: string\r\n   message: string\r\n   id: number\r\n}\r\n\r\nconst Message: React.FC<PropsType> = (props) => {\r\n   return (\r\n      <div className={s.message}>\r\n         <div className={s.user}>\r\n            <div className={s.icon}>\r\n               <img src={userPhoto} alt=\"\" />\r\n            </div>\r\n            <p className={s.name}>{props.name}</p>\r\n         </div>\r\n         <div className={s.content}>\r\n            <p className={s.text}>{props.message}</p>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport default Message;","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { reduxForm, Field, reset } from 'redux-form';\r\nimport s from './MessageForm.module.scss'\r\nimport { compose } from 'redux';\r\nimport { addMessageActionCreator } from '../../../redux/dialogs-reducer';\r\nimport { maxLengthCreator, required } from '../../../utilits/validators/validators';\r\nimport { Textarea } from '../../common/FormElements/FormElements';\r\nimport { AppStateType } from '../../../redux/redux-store';\r\n\r\nconst maxLength200 = maxLengthCreator(200);\r\n\r\n\r\n\r\nclass MessageFormComponent extends React.Component<any> {\r\n   onAddMessage = (values: any, dispatch: any) => {\r\n      this.props.addMessageActionCreator(values.addNewMessage);\r\n      dispatch(reset('MessageForm'));\r\n   };\r\n   render() {\r\n      return (\r\n         <MessageReduxForm onSubmit={this.onAddMessage} />\r\n      );\r\n   }\r\n}\r\n\r\nconst MessageForm = (props: any) => {\r\n   return (\r\n      <form className={s.messageForm} onSubmit={props.handleSubmit}>\r\n         <Field\r\n            component={Textarea}\r\n            className={s.messageArea}\r\n            placeholder=\"Write message...\"\r\n            name={'addNewMessage'}\r\n            validate={[required, maxLength200]} />\r\n         <button className={s.messageSend}>Send</button>\r\n      </form>\r\n   );\r\n};\r\n\r\n\r\n\r\nlet mapStateToProps = (state: any) => {\r\n   return {\r\n      newText: state.dialogsPage.messageNewText,\r\n   }\r\n};\r\n\r\nconst MessageReduxForm = reduxForm({ form: 'MessageForm' })(MessageForm);\r\n\r\n\r\nexport default compose(\r\n   connect(mapStateToProps, { addMessageActionCreator }),\r\n)(MessageFormComponent);","import React, { Component } from 'react';\r\nimport s from './Dialogs.module.scss'\r\nimport Dialog from './Dialog/Dialog';\r\nimport Message from './Message/Message';\r\nimport MessageFormComponent from './MessageForm/MessageFormContainer';\r\nimport { PropsType } from './DialogsContainer';\r\n\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n   let dialogElements = props.dialogs.map(d => <Dialog name={d.name} id={d.id} />);\r\n   let messageElements = props.messages.map(m => <Message name={m.name} id={m.id} message={m.message} />);\r\n   return (\r\n      <div className={s.dialogs}>\r\n         <ul className={s.items}>\r\n            <h2 className={s.title}>Dialogs</h2>\r\n            {dialogElements}\r\n         </ul>\r\n         <div className={s.wrapper}>\r\n            <div className={s.messages}>\r\n               {messageElements}\r\n            </div>\r\n            <MessageFormComponent />\r\n         </div>\r\n      </div>\r\n   );\r\n};\r\nexport default Dialogs;\r\n","import React from 'react';\r\nimport { Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\n\r\nlet mapStateToPropsForRedirect = (state) => ({\r\n   isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthRedirect = (Component) => {\r\n   class RedirectComponent extends React.Component {\r\n      render() {\r\n         if (!this.props.isAuth) return <Redirect to='/login' />\r\n         return <Component {...this.props} />\r\n      };\r\n   };\r\n   let ConnectedAuthRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent);\r\n   return ConnectedAuthRedirectComponent;\r\n};\r\n\r\n\r\n\r\n","import { AppStateType } from \"../redux/redux-store\";\r\n\r\nexport const getDialogs = (state: AppStateType) => {\r\n   return state.dialogsPage.dialogs\r\n};\r\nexport const getMessages = (state: AppStateType) => {\r\n   return state.dialogsPage.messages\r\n};\r\n\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { compose } from 'redux';\r\nimport Dialogs from './Dialogs';\r\nimport { withAuthRedirect } from '../../hoc/withAuthRedirect';\r\nimport { getDialogs, getMessages } from '../../selectors/dialogs-selectors';\r\nimport { DialogsType, MessagesType } from '../../redux/dialogs-reducer';\r\nimport { AppStateType } from '../../redux/redux-store';\r\n\r\n\r\ntype MapStateToPropsType = {\r\n   dialogs: Array<DialogsType>\r\n   messages: Array<MessagesType>\r\n}\r\ntype MapDispatchToPropsType = {\r\n}\r\nexport type PropsType = MapStateToPropsType & MapDispatchToPropsType\r\n\r\n\r\nclass DialogsContainer extends React.Component<PropsType> {\r\n   render() {\r\n      return (\r\n         <Dialogs {...this.props} />\r\n      );\r\n   }\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n   return {\r\n      dialogs: getDialogs(state),\r\n      messages: getMessages(state),\r\n   };\r\n};\r\n\r\n\r\n\r\n\r\nexport default compose(\r\n   connect(mapStateToProps, {}),\r\n   withAuthRedirect,\r\n)(DialogsContainer);\r\n"],"sourceRoot":""}