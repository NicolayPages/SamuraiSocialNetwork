{"version":3,"sources":["components/Dialogs/Dialog/Dialog.module.scss","components/Dialogs/Dialogs.module.scss","components/Dialogs/Message/Message.module.scss","components/Dialogs/MessageForm/MessageForm.module.scss","selectors/dialogs-selectors.ts","components/Dialogs/Dialog/Dialog.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/MessageForm/MessageFormContainer.tsx","components/Dialogs/DialogsContainer.tsx"],"names":["module","exports","getDialogs","state","dialogsPage","dialogs","getMessages","messages","getIsFetching","isFetching","Dialog","React","memo","props","id","name","path","className","s","link","to","activeClassName","Message","message","user","icon","src","userPhoto","alt","content","text","MessageForm","dispatch","useDispatch","addMessageActionCreator","actions","SignupSchema","Yup","shape","newMessage","required","wrapper","initialValues","onSubmit","values","resetForm","validationSchema","errors","touched","messageForm","component","messageArea","placeholder","messageSend","DialogsContainer","useSelector","useEffect","startNewChat","getAllMessages","Preloader","Dialogs","dialogElements","map","d","messageElements","m","items","title"],"mappings":"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","file":"static/js/7.d6008674.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"link\":\"Dialog_link__3OONQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1YxzG\",\"items\":\"Dialogs_items__MNeEY\",\"title\":\"Dialogs_title__1zSl8\",\"messages\":\"Dialogs_messages__YnvOH\",\"wrapper\":\"Dialogs_wrapper__3A2lt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"message\":\"Message_message__ylXXx\",\"user\":\"Message_user__3kYNv\",\"icon\":\"Message_icon__2_PJA\",\"name\":\"Message_name__2kCrt\",\"content\":\"Message_content__3Gdg-\",\"text\":\"Message_text__tALBX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"MessageForm_wrapper__1aYXS\",\"messageForm\":\"MessageForm_messageForm__tG0dA\",\"messageArea\":\"MessageForm_messageArea__1wiE3\",\"messageSend\":\"MessageForm_messageSend__1tNW7\",\"error\":\"MessageForm_error__QUVk-\"};","import { AppStateType } from \"../redux/redux-store\";\r\n\r\nexport const getDialogs = (state: AppStateType) => {\r\n   return state.dialogsPage.dialogs\r\n};\r\nexport const getMessages = (state: AppStateType) => {\r\n   return state.dialogsPage.messages\r\n};\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.dialogsPage.isFetching\r\n};\r\n\r\n\r\n","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport s from './Dialog.module.scss';\r\n\r\ntype PropsType = {\r\n   id: number\r\n   name: string\r\n}\r\n\r\nexport const Dialog: React.FC<PropsType> = React.memo((props) => {\r\n   const { id, name } = props\r\n   let path = \"/dialogs/\" + id;\r\n   return (\r\n      <li className={s.link}><NavLink to={path} activeClassName=\"selected\" >{name}</NavLink></li>\r\n   );\r\n})\r\n","import React from 'react';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport s from './Message.module.scss';\r\n\r\ntype PropsType = {\r\n   name: string\r\n   message: string\r\n}\r\n\r\nexport const Message: React.FC<PropsType> = React.memo((props) => {\r\n   const { name, message } = props\r\n   return (\r\n      <div className={s.message}>\r\n         <div className={s.user}>\r\n            <div className={s.icon}>\r\n               <img src={userPhoto} alt=\"\" />\r\n            </div>\r\n            <p className={s.name}>{name}</p>\r\n         </div>\r\n         <div className={s.content}>\r\n            <p className={s.text}>{message}</p>\r\n         </div>\r\n      </div>\r\n   );\r\n})\r\n\r\n","import { Field, Form, Formik } from 'formik';\r\nimport React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\nimport { actions } from '../../../redux/dialogs-reducer';\r\nimport s from './MessageForm.module.scss';\r\nimport * as Yup from 'yup';\r\n\r\ninterface MyFormValues {\r\n   newMessage: string;\r\n}\r\n\r\n\r\nexport const MessageForm: React.FC = React.memo(() => {\r\n\r\n   const dispatch = useDispatch();\r\n\r\n   const addMessageActionCreator = actions.addMessageActionCreator\r\n\r\n   let onAddMessage = (values: any, actions: any) => {\r\n      dispatch(addMessageActionCreator(values.newMessage))\r\n      actions.resetForm(true);\r\n   };\r\n\r\n   const SignupSchema = Yup.object().shape({\r\n      newMessage: Yup.string().required('Field is required'),\r\n   });\r\n\r\n   const initialValues: MyFormValues = { newMessage: '' };\r\n\r\n   return (\r\n      <Formik\r\n         className={s.wrapper}\r\n         initialValues={initialValues}\r\n         onSubmit={onAddMessage}\r\n         validationSchema={SignupSchema}\r\n      >\r\n         {({ errors, touched }) =>\r\n            <Form className={s.messageForm}>\r\n               <Field\r\n                  component={'textarea'}\r\n                  name={'newMessage'}\r\n                  className={s.messageArea}\r\n                  placeholder={'Write message...'}\r\n               />\r\n               <button className={s.messageSend}>Send</button>\r\n\r\n            </Form>\r\n         }\r\n\r\n      </Formik>\r\n   );\r\n})\r\n\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { DialogsType, getAllMessages, MessagesType, startNewChat } from '../../redux/dialogs-reducer';\r\nimport { getDialogs, getIsFetching, getMessages } from '../../selectors/dialogs-selectors';\r\nimport Preloader from '../common/Preloader/Preloader';\r\nimport { Dialog } from './Dialog/Dialog';\r\nimport s from './Dialogs.module.scss';\r\nimport { Message } from './Message/Message';\r\nimport { MessageForm } from './MessageForm/MessageFormContainer';\r\n\r\n\r\n\r\ntype PropsType = {\r\n   dialogs: Array<DialogsType>\r\n   messages: Array<MessagesType>\r\n}\r\n\r\n\r\n\r\nconst DialogsContainer: React.FC = React.memo(() => {\r\n   const dialogs = useSelector(getDialogs)\r\n   const messages = useSelector(getMessages)\r\n   const isFetching = useSelector(getIsFetching)\r\n\r\n   let dispatch = useDispatch()\r\n   let userId = 2\r\n\r\n   useEffect(() => {\r\n      dispatch(startNewChat(userId))\r\n      dispatch(getAllMessages(userId))\r\n   }, []);\r\n\r\n   if (isFetching) {\r\n      return <Preloader />\r\n   }\r\n\r\n   return (\r\n      <Dialogs\r\n         dialogs={dialogs}\r\n         messages={messages}\r\n      />\r\n   )\r\n})\r\n\r\n\r\nconst Dialogs: React.FC<PropsType> = React.memo((props) => {\r\n   const { dialogs, messages } = props\r\n\r\n   let dialogElements = dialogs.map((d: DialogsType) =>\r\n      <Dialog key={d.id} name={d.name} id={d.id} />);\r\n\r\n   let messageElements = messages.map((m: MessagesType) =>\r\n      <Message key={m.id} name={m.name} message={m.message} />);\r\n\r\n   return (\r\n      <div className={s.dialogs}>\r\n         <ul className={s.items}>\r\n            <h2 className={s.title}>Dialogs</h2>\r\n            {dialogElements}\r\n         </ul>\r\n         <div className={s.wrapper}>\r\n            <div className={s.messages}>\r\n               {messageElements}\r\n            </div>\r\n            <MessageForm />\r\n         </div>\r\n      </div>\r\n   );\r\n})\r\n\r\n\r\n\r\n\r\nexport default DialogsContainer\r\n\r\n\r\n"],"sourceRoot":""}