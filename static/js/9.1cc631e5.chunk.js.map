{"version":3,"sources":["components/Chat/ChatPage.module.scss","components/Chat/ChatPage.tsx","../node_modules/@babel/runtime/helpers/esm/objectDestructuringEmpty.js"],"names":["module","exports","Chat","dispatch","useDispatch","status","useSelector","state","chat","useEffect","startMessagesListening","stopMessagesListening","className","s","title","Messages","obj","TypeError","messages","messagesAnchorRef","useRef","useState","isAutoScroll","setIsAutoScroll","current","scrollIntoView","behavior","messagesList","map","m","Message","message","id","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","ref","React","memo","messageItem","ava","to","userId","src","photo","userAva","flex","name","userName","AddMessageForm","setMessage","messageForm","onChange","value","area","placeholder","disabled","onClick","sendMessage","btn","ChatPage"],"mappings":"uFACAA,EAAOC,QAAU,CAAC,YAAc,8BAA8B,IAAM,sBAAsB,KAAO,uBAAuB,KAAO,uBAAuB,QAAU,0BAA0B,SAAW,2BAA2B,YAAc,8BAA8B,KAAO,uBAAuB,IAAM,sBAAsB,KAAO,uBAAuB,MAAQ,0B,gICkBtWC,EAAiB,WAEnB,IAAMC,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAS/D,OAPAI,qBAAU,WAEN,OADAN,EAASO,eACF,WACHP,EAASQ,kBAEd,IAEI,qCACS,UAAXN,GAAsB,8EACvB,sBAAKO,UAAWC,IAAEL,KAAlB,UACI,oBAAII,UAAWC,IAAEC,MAAjB,wBACA,cAAC,EAAD,IACA,cAAC,EAAD,WAKNC,EAAyB,SAAC,IC1CjB,SAAmCC,GAChD,GAAW,MAAPA,EAAa,MAAM,IAAIC,UAAU,gCDyCE,IACrC,IAAMC,EAAWZ,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKU,YAC3DC,EAAoBC,iBAAuB,MACjD,EAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAWAd,qBAAU,WACa,IAAD,EAAda,IACA,UAAAH,EAAkBK,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAE3D,CAACR,IAEJ,IAAIS,EAAeT,EAASU,KAAI,SAACC,GAAD,OAAO,cAACC,EAAD,CAAoBC,QAASF,GAAfA,EAAEG,OACvD,OACI,sBAAKC,SAjBa,SAACC,GACnB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7EnB,GAAgBC,GAAgB,GAEjCD,GAAgBC,GAAgB,IAYNX,UAAWC,IAAEK,SAA3C,UACKS,EACD,qBAAKe,IAAKvB,QAOhBW,EAAqDa,IAAMC,MAAK,YAAkB,IAAfb,EAAc,EAAdA,QACrE,OACI,sBAAKnB,UAAWC,IAAEgC,YAAlB,UACI,qBAAKjC,UAAWC,IAAEiC,IAAlB,SACI,eAAC,IAAD,CAAMC,GAAI,WAAahB,EAAQiB,OAA/B,cAAwC,qBAAKC,IAAKlB,EAAQmB,MAAQnB,EAAQmB,MAAQC,WAEtF,sBAAKvC,UAAWC,IAAEuC,KAAlB,UACI,oBAAIxC,UAAWC,IAAEwC,KAAjB,SAAwBtB,EAAQuB,WAChC,mBAAG1C,UAAWC,IAAEkB,QAAhB,SAA0BA,EAAQA,mBAO5CwB,EAA+B,WACjC,MAA8BlC,mBAAS,IAAvC,mBAAOU,EAAP,KAAgByB,EAAhB,KACMrD,EAAWC,cAEXC,EAASC,aAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAW/D,OACI,sBAAKO,UAAWC,IAAE4C,YAAlB,UACI,0BACIC,SAAU,SAACxB,GAAD,OAAOsB,EAAWtB,EAAEE,cAAcuB,QAC5CA,MAAO5B,EACPnB,UAAWC,IAAE+C,KACbC,YAAa,qBAEjB,8BAAK,wBAAQC,SAAqB,UAAXzD,EAAoB0D,QAhBxB,WAClBhC,IAGL5B,EAAS6D,YAAYjC,IACrByB,EAAW,MAWiE5C,UAAWC,IAAEoD,IAAhF,wBAMFC,UA1GY,WACvB,OACI,8BACI,cAAC,EAAD","file":"static/js/9.1cc631e5.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"messageItem\":\"ChatPage_messageItem__3hgfY\",\"ava\":\"ChatPage_ava__1opON\",\"flex\":\"ChatPage_flex__1VMbX\",\"name\":\"ChatPage_name__2FBv3\",\"message\":\"ChatPage_message__27PZF\",\"messages\":\"ChatPage_messages__1IlCN\",\"messageForm\":\"ChatPage_messageForm__3KEJ3\",\"area\":\"ChatPage_area__2Hu4-\",\"btn\":\"ChatPage_btn__1qMsf\",\"chat\":\"ChatPage_chat__XQP9r\",\"title\":\"ChatPage_title__30Eor\"};","import React, { useEffect, useRef, useState } from 'react'\r\nimport { ChatMessageAPIType } from '../../api/chat-api'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { sendMessage, startMessagesListening, stopMessagesListening } from '../../redux/chat-reducer'\r\nimport { AppStateType } from '../../redux/redux-store'\r\nimport s from './ChatPage.module.scss'\r\nimport userAva from '../../assets/images/user.png'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\n\r\nconst ChatPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Chat />\r\n        </div>\r\n    )\r\n}\r\n\r\nconst Chat: React.FC = () => {\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListening())\r\n        return () => {\r\n            dispatch(stopMessagesListening())\r\n        }\r\n    }, [])\r\n\r\n    return <>\r\n        {status === 'error' && <div>Some error occured. Please refresh the page</div>}\r\n        <div className={s.chat}>\r\n            <h1 className={s.title}>Users chat</h1>\r\n            <Messages />\r\n            <AddMessageForm />\r\n        </div>\r\n    </>\r\n}\r\n\r\nconst Messages: React.FC<{}> = ({ }) => {\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n    const [isAutoScroll, setIsAutoScroll] = useState(true)\r\n\r\n    const scrollHandler = (e: React.UIEvent<HTMLDivElement, UIEvent>) => {\r\n        const element = e.currentTarget;\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScroll && setIsAutoScroll(true)\r\n        } else {\r\n            isAutoScroll && setIsAutoScroll(false)\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (isAutoScroll) {\r\n            messagesAnchorRef.current?.scrollIntoView({ behavior: 'smooth' })\r\n        }\r\n    }, [messages])\r\n\r\n    let messagesList = messages.map((m) => <Message key={m.id} message={m} />)\r\n    return (\r\n        <div onScroll={scrollHandler} className={s.messages}>\r\n            {messagesList}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\n\r\nconst Message: React.FC<{ message: ChatMessageAPIType }> = React.memo(({ message }) => {\r\n    return (\r\n        <div className={s.messageItem}>\r\n            <div className={s.ava}>\r\n                <Link to={'profile/' + message.userId}> <img src={message.photo ? message.photo : userAva} /></Link>\r\n            </div>\r\n            <div className={s.flex}>\r\n                <h4 className={s.name}>{message.userName}</h4>\r\n                <p className={s.message}>{message.message}</p>\r\n            </div>\r\n        </div >\r\n    )\r\n})\r\n\r\n\r\nconst AddMessageForm: React.FC<{}> = () => {\r\n    const [message, setMessage] = useState('')\r\n    const dispatch = useDispatch()\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n\r\n\r\n    const sendMessageHandler = () => {\r\n        if (!message) {\r\n            return\r\n        }\r\n        dispatch(sendMessage(message))\r\n        setMessage('')\r\n    }\r\n\r\n    return (\r\n        <div className={s.messageForm}>\r\n            <textarea\r\n                onChange={(e) => setMessage(e.currentTarget.value)}\r\n                value={message}\r\n                className={s.area}\r\n                placeholder={'write message...'}\r\n            ></textarea>\r\n            <div><button disabled={status !== 'ready'} onClick={sendMessageHandler} className={s.btn}>send</button></div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default ChatPage\r\n","export default function _objectDestructuringEmpty(obj) {\n  if (obj == null) throw new TypeError(\"Cannot destructure undefined\");\n}"],"sourceRoot":""}