{"version":3,"sources":["components/common/ErrorPopup/ErrorPopup.module.scss","selectors/auth-selectors.ts","components/Header/Header.module.scss","components/Sidebar/Sidebar.module.scss","components/Sidebar/Friends/Friends.module.scss","redux/auth-reducer.ts","components/common/Preloader/Preloader.tsx","assets/images/user.png","redux/profile-reducer.ts","components/common/Preloader/Preloader.module.scss","api/api.ts","components/common/MiniPreloader/Preloader.module.scss","selectors/profile-selectors.ts","redux/dialogs-reducer.ts","assets/images/error.jpg","selectors/error-selectors.ts","components/common/ErrorPopup/ErrorPopup.tsx","utilits/object-helpers.ts","redux/users-reducer.ts","api/chat-api.ts","redux/chat-reducer.ts","redux/errors-reducer.ts","router/router.tsx","components/AppRoutes/AppRoutes.tsx","assets/images/logo.png","components/Header/Header.tsx","redux/sidebar-reducer.ts","selectors/sidebar-selectors.ts","components/common/MiniPreloader/Preloader.tsx","components/Sidebar/Friends/Friends.tsx","components/Sidebar/Menu_link/Menu_link.tsx","components/Sidebar/Sidebar.tsx","redux/app-reducer.ts","App.tsx","reportWebVitals.js","redux/redux-store.ts","index.tsx"],"names":["module","exports","getIsAuth","state","auth","isAuth","getLogin","login","getUserId","userId","getCaptcha","captcha","getAuthError","authError","getInitialized","app","initialized","initialState","email","actions","type","data","error","authUserData","dispatch","a","authAPI","getUserData","resultCode","ResultCodeEnum","Success","id","showError","message","authUserLogIn","password","rememberMe","logInUser","CaptchaIsRequired","getCapthchaUrl","errorMessage","messages","length","authUserLogOut","logOutUser","securityAPI","url","authReducer","action","Preloader","React","memo","className","s","wrapper","ldsDualRing","posts","likes","profile","isFetching","status","editMode","localIsFetching","ownerPhoto","addPostActionCreator","postMessage","setUserProfile","toggleIsFetching","setStatus","deletePost","postId","likePost","postLike","setPhoto","photosFiles","toggleLocalIsFetching","onEditMode","offEditMode","setProfileError","setOwnerPhoto","photo","getUserProfile","profileAPI","getProfile","response","getStatus","updateStatus","updatePhoto","photoFile","photos","updateProfile","profileData","getState","getOwnerPhoto","small","profileReducer","newPost","filter","p","map","instance","axios","create","withCredentials","baseURL","headers","usersAPI","getUsers","currentPage","pageSize","term","friend","get","then","followUser","post","unfollowUser","delete","getFiends","put","getUsersForProfile","formData","FormData","append","newData","getUserPhoto","dialogsAPI","startChatting","getMessages","profilePage","getIsFetching","getUserStatus","getPosts","getEditMode","getLocalIsFetching","getProfileError","getPhoto","dialogs","name","addMessageActionCreator","getNewMessages","getAllMessages","console","log","startNewChat","dialogsReducer","newMessage","getErrorMessage","errors","ErrorPopup","useSelector","useDispatch","deactivateMode","wrapperNone","wrapperBody","header","title","closeWrapper","close","onClick","content","subtitle","image","src","errorIcon","alt","updateObjectInArray","items","itemId","objPropName","newObjProps","u","users","totalUserCount","isFollowing","totalCount","followUnfollowFlow","apiMethod","actionCreator","requestUsers","followUsers","bind","unfollowUsers","usersReducer","followed","subcribers","ws","closeHandler","notifySubscribersAboutStatus","setTimeout","createChannel","messageHandler","e","newMessages","JSON","parse","forEach","openHandler","errorHandler","cleanUp","removeEventListener","WebSocket","addEventListener","chatAPI","eventName","callback","push","send","payload","_newMessageHandler","newMessageHandlerCreator","_statusChangedHandler","statusChangedHandlerCreator","startMessagesListening","stopMessagesListening","sendMessage","chatReducer","m","uuidv1","index","array","errorsMode","activateMode","errorsReducer","ProfileContainer","DialogsContainer","UsersContainer","LoginContainer","privateRoutes","path","component","exact","publicRoutes","AppRoutes","fallback","route","to","HeaderContainer","authId","useEffect","Header","props","container","headerBody","logo","loginBlock","login_wrapper","login_ava","userPhoto","btn","links","address","icon","UserOutlined","MessageOutlined","CommentOutlined","TeamOutlined","friends","sidebarReducer","getLinks","sidebar","getFriends","getPageSize","getCurrentPage","MiniPreloader","Friends","friendsElements","f","Friend","flex","Menu_link","sidebar__link","link","activeClassName","active","SidebarContainer","requestFriends","Sidebar","menuElements","l","Sidebar__list","appReducer","compose","withRouter","promise","Promise","all","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","dialogsPage","usersPage","chat","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.216f19f8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapperNone\":\"ErrorPopup_wrapperNone__1EKn_\",\"wrapper\":\"ErrorPopup_wrapper__JRpyc\",\"wrapperBody\":\"ErrorPopup_wrapperBody__1uy62\",\"closeWrapper\":\"ErrorPopup_closeWrapper__1L355\",\"header\":\"ErrorPopup_header__1p1Sh\",\"title\":\"ErrorPopup_title__2stoK\",\"close\":\"ErrorPopup_close__3dTTe\",\"content\":\"ErrorPopup_content__1GiGB\",\"subtitle\":\"ErrorPopup_subtitle__3_Suh\",\"image\":\"ErrorPopup_image__Qr0-o\"};","import { AppStateType } from \"../redux/redux-store\";\r\n\r\nexport const getIsAuth = (state: AppStateType) => {\r\n   return state.auth.isAuth\r\n};\r\nexport const getLogin = (state: AppStateType) => {\r\n   return state.auth.login\r\n};\r\nexport const getUserId = (state: AppStateType) => {\r\n   return state.auth.userId\r\n};\r\nexport const getCaptcha = (state: AppStateType) => {\r\n   return state.auth.captcha\r\n};\r\nexport const getAuthError = (state: AppStateType) => {\r\n   return state.auth.authError\r\n};\r\n\r\nexport const getInitialized = (state: AppStateType) => {\r\n   return state.app.initialized\r\n};\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__14q2p\",\"container\":\"Header_container__2zgjm\",\"headerBody\":\"Header_headerBody__3L2xV\",\"loginBlock\":\"Header_loginBlock__5-fvZ\",\"login_wrapper\":\"Header_login_wrapper__1g1hm\",\"login_ava\":\"Header_login_ava__ck3w4\",\"login\":\"Header_login__dSwZ1\",\"btn\":\"Header_btn__8NYfP\",\"logo\":\"Header_logo__3XlIA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Sidebar\":\"Sidebar_Sidebar__2SyFz\",\"Sidebar__list\":\"Sidebar_Sidebar__list__2sYKm\",\"sidebar__link\":\"Sidebar_sidebar__link__2eWD7\",\"icon\":\"Sidebar_icon__3GoS7\",\"link\":\"Sidebar_link__2MCA1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"title\":\"Friends_title__3sdAS\",\"friend\":\"Friends_friend__3U11j\",\"flex\":\"Friends_flex__2amwk\",\"icon\":\"Friends_icon__3UfN2\",\"name\":\"Friends_name__10bK-\"};","import { ThunkAction } from 'redux-thunk';\r\nimport { authAPI, ResultCodeEnum, securityAPI } from '../api/api';\r\nimport { showError } from './errors-reducer';\r\nimport { AppStateType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n   userId: null as number | null,\r\n   email: null as string | null,\r\n   login: null as string | null,\r\n   isAuth: false,\r\n   captcha: null as string | null,\r\n   authError: null as string | null,\r\n};\r\ntype initialStateType = typeof initialState\r\n\r\n\r\nconst authReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n   switch (action.type) {\r\n      case 'SET_USER_DATA': {\r\n         return {\r\n            ...state,\r\n            ...action.data,\r\n            isAuth: true,\r\n         };\r\n      };\r\n      case 'SET_CAPTCHA': {\r\n         return {\r\n            ...state,\r\n            captcha: action.captcha,\r\n         }\r\n      };\r\n      case 'SET_LOGOUT': {\r\n         return {\r\n            ...state,\r\n            ...action.data,\r\n         };\r\n      };\r\n      case 'SET_AUTH_ERROR': {\r\n         return {\r\n            ...state,\r\n            authError: action.error\r\n         };\r\n      };\r\n      default:\r\n         return state;\r\n   };\r\n};\r\n\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n\r\nexport const actions = {\r\n   setAuthUserData: (userId: number | null, email: string | null, login: string | null, captcha: string | null) => ({ type: 'SET_USER_DATA', data: { userId, email, login, captcha } } as const),\r\n\r\n   setAuthLogin: (email: string | null, password: string | null, rememberMe: boolean) => ({ type: 'SET_LOGIN', formData: { email, password, rememberMe } } as const),\r\n\r\n   setAuthLogout: (userId: null, email: null, login: null, isAuth: boolean, authError: null) => ({ type: 'SET_LOGOUT', data: { userId, email, login, isAuth, authError } } as const),\r\n\r\n   setSecurityCaptcha: (captcha: string) => ({ type: 'SET_CAPTCHA', captcha } as const),\r\n\r\n   setAuthError: (error: string) => ({ type: 'SET_AUTH_ERROR', error } as const),\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>\r\n\r\nexport const authUserData = (): ThunkType => async (dispatch) => {\r\n   try {\r\n      let data = await authAPI.getUserData();\r\n      if (data.resultCode === ResultCodeEnum.Success) {\r\n         let { id, email, login, captcha } = data.data;\r\n         dispatch(actions.setAuthUserData(id, email, login, captcha));\r\n      }\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n};\r\n\r\nexport const authUserLogIn = (email: string, password: string, rememberMe: boolean, captcha: string | null): ThunkType => async (dispatch: any) => {\r\n   try {\r\n      let data = await authAPI.logInUser(email, password, rememberMe, captcha)\r\n      if (data.resultCode == ResultCodeEnum.Success) {\r\n         dispatch(authUserData())\r\n      } else {\r\n         if (data.resultCode == ResultCodeEnum.CaptchaIsRequired) {\r\n            dispatch(getCapthchaUrl())\r\n         }\r\n         let errorMessage = data.messages.length > 0 ? data.messages[0] : \"Some error\";\r\n         dispatch(actions.setAuthError(errorMessage))\r\n      }\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n\r\n};\r\n\r\nexport const authUserLogOut = (): ThunkType => async (dispatch) => {\r\n   try {\r\n      let data = await authAPI.logOutUser();\r\n      if (data.resultCode == ResultCodeEnum.Success) {\r\n         dispatch(actions.setAuthLogout(null, null, null, false, null,));\r\n      }\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n};\r\n\r\nexport const getCapthchaUrl = (): ThunkType => async (dispatch) => {\r\n   try {\r\n      let data = await securityAPI.getCaptcha();\r\n      dispatch(actions.setSecurityCaptcha(data.url));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n};\r\n\r\n\r\n\r\nexport default authReducer;","import React from 'react';\r\nimport s from './Preloader.module.scss';\r\n\r\n\r\nconst Preloader: React.FC = React.memo(() => {\r\n   return (\r\n      <div className={s.wrapper}>\r\n         <div className={s.ldsDualRing}></div>\r\n      </div>\r\n   );\r\n})\r\n\r\nexport default Preloader;","export default __webpack_public_path__ + \"static/media/user.4e009506.png\";","import { ThunkAction } from 'redux-thunk';\r\nimport { profileAPI, ResultCodeEnum } from '../api/api';\r\nimport { PhotosType, ProfileType } from '../types/types';\r\nimport { showError } from './errors-reducer';\r\nimport { AppStateType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nexport type PostsType = {\r\n   id: number\r\n   message: string\r\n   likes: number\r\n}\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n\r\nlet initialState = {\r\n   posts: [\r\n      { id: 1, message: \"Hi, how are you\", likes: 2, },\r\n      { id: 2, message: \"Hello everyone\", likes: 12, },\r\n      { id: 3, message: \"My pet project\", likes: 5, },\r\n   ] as Array<PostsType>,\r\n   profile: null as ProfileType | null,\r\n   isFetching: false,\r\n   status: '',\r\n   editMode: false,\r\n   localIsFetching: false,\r\n   errorMessage: null as string | null,\r\n   ownerPhoto: null as string | null\r\n};\r\n\r\ntype InitialStateType = typeof initialState;\r\n\r\nconst profileReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'ADD_POST': {\r\n         let newPost = {\r\n            id: state.posts.length + 2,\r\n            message: action.postMessage,\r\n            likes: 0,\r\n         };\r\n         return {\r\n            ...state,\r\n            posts: [newPost, ...state.posts],\r\n         };\r\n      };\r\n      case 'SET_USER_PROFILE': {\r\n         return { ...state, profile: action.profile, }\r\n      };\r\n      case 'IS_FETCHING':\r\n         return {\r\n            ...state, isFetching: action.isFetching\r\n         };\r\n      case 'LOCAL_IS_FETCHING':\r\n         return {\r\n            ...state, localIsFetching: action.localIsFetching\r\n         };\r\n      case 'SET_STATUS':\r\n         return {\r\n            ...state,\r\n            status: action.status\r\n         };\r\n      case 'DELETE_POST':\r\n         return {\r\n            ...state,\r\n            posts: state.posts.filter(p => p.id != action.postId),\r\n         };\r\n      case 'LIKE_POST':\r\n         return {\r\n            ...state,\r\n            posts: state.posts.map(p => {\r\n               if (p.id === action.postId) {\r\n                  return { ...p, likes: action.postLike, }\r\n               }\r\n               return p;\r\n            }),\r\n         };\r\n      case 'SAVE_PHOTO_SUCCESS':\r\n         return {\r\n            ...state,\r\n            profile: { ...state.profile, photos: action.photosFiles } as ProfileType,\r\n         };\r\n      case 'ON_EDIT_MODE':\r\n         return {\r\n            ...state,\r\n            editMode: true,\r\n         };\r\n      case 'OFF_EDIT_MODE':\r\n         return {\r\n            ...state,\r\n            editMode: false,\r\n         };\r\n      case 'SET_PROFILE_ERROR':\r\n         return {\r\n            ...state,\r\n            errorMessage: action.errorMessage\r\n         };\r\n      case 'SET_OWNER_PHOTO':\r\n         return {\r\n            ...state,\r\n            ownerPhoto: action.photo\r\n         };\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\n\r\nexport const actions = {\r\n   addPostActionCreator: (postMessage: string) => ({ type: 'ADD_POST', postMessage } as const),\r\n   setUserProfile: (profile: ProfileType) => ({ type: 'SET_USER_PROFILE', profile, } as const),\r\n   toggleIsFetching: (isFetching: boolean) => ({ type: 'IS_FETCHING', isFetching } as const),\r\n   setStatus: (status: string) => ({ type: 'SET_STATUS', status, } as const),\r\n   deletePost: (postId: number) => ({ type: 'DELETE_POST', postId } as const),\r\n   likePost: (postId: number, postLike: number) => ({ type: 'LIKE_POST', postId, postLike } as const),\r\n   setPhoto: (photosFiles: PhotosType) => ({ type: 'SAVE_PHOTO_SUCCESS', photosFiles } as const),\r\n   toggleLocalIsFetching: (localIsFetching: boolean) => ({ type: 'LOCAL_IS_FETCHING', localIsFetching } as const),\r\n   onEditMode: () => ({ type: 'ON_EDIT_MODE' } as const),\r\n   offEditMode: () => ({ type: 'OFF_EDIT_MODE' } as const),\r\n   setProfileError: (errorMessage: string | null) => ({ type: 'SET_PROFILE_ERROR', errorMessage } as const),\r\n   setOwnerPhoto: (photo: string | null) => ({ type: 'SET_OWNER_PHOTO', photo } as const),\r\n}\r\n\r\n\r\n\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nexport const getUserProfile = (userId: number): ThunkType => async (dispatch) => {\r\n   try {\r\n      dispatch(actions.toggleIsFetching(true));\r\n      let response = await profileAPI.getProfile(userId);\r\n      dispatch(actions.setUserProfile(response.data));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   } finally {\r\n      dispatch(actions.toggleIsFetching(false));\r\n   }\r\n};\r\n\r\nexport const getStatus = (userId: number): ThunkType => async (dispatch) => {\r\n   try {\r\n      let response = await profileAPI.getStatus(userId);\r\n      dispatch(actions.setStatus(response.data));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n\r\n};\r\n\r\nexport const updateStatus = (status: string): ThunkType => async (dispatch) => {\r\n   try {\r\n      let response = await profileAPI.updateStatus(status)\r\n      if (response.data.resultCode === ResultCodeEnum.Success) {\r\n         dispatch(actions.setStatus(status));\r\n      }\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n};\r\n\r\nexport const updatePhoto = (photoFile: PhotosType): ThunkType => async (dispatch) => {\r\n   try {\r\n      dispatch(actions.toggleLocalIsFetching(true))\r\n      let response = await profileAPI.updatePhoto(photoFile)\r\n      if (response.data.resultCode === ResultCodeEnum.Success) {\r\n         dispatch(actions.setPhoto(response.data.data.photos));\r\n      }\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   } finally {\r\n      dispatch(actions.toggleLocalIsFetching(false))\r\n   }\r\n};\r\n\r\nexport const updateProfile = (profileData: ProfileType): ThunkType => async (dispatch, getState: any) => {\r\n   try {\r\n      dispatch(actions.toggleIsFetching(true))\r\n      const userId = getState().auth.userId\r\n      let response = await profileAPI.updateProfile(profileData)\r\n      if (response.data.resultCode === ResultCodeEnum.Success) {\r\n         dispatch(getUserProfile(userId));\r\n         dispatch(actions.offEditMode());\r\n      } else {\r\n         let errorMessage = response.data.messages.length > 0 ? response.data.messages[0] : \"Some error\";\r\n         dispatch(actions.setProfileError(errorMessage));\r\n      }\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   } finally {\r\n      dispatch(actions.toggleIsFetching(false))\r\n   }\r\n\r\n};\r\n\r\nexport const getOwnerPhoto = (userId: number): ThunkType => async (dispatch) => {\r\n   try {\r\n      let response = await profileAPI.getProfile(userId);\r\n      dispatch(actions.setOwnerPhoto(response.data.photos.small));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n};\r\n\r\nexport default profileReducer;","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsDualRing\":\"Preloader_ldsDualRing__3S__x\",\"wrapper\":\"Preloader_wrapper__2Qfjg\"};","import React from 'react';\r\nimport axios from \"axios\";\r\nimport { PhotosType, ProfileType, UsersType } from '../types/types';\r\n\r\n\r\nconst instance = axios.create({\r\n   withCredentials: true,\r\n   baseURL: 'https://social-network.samuraijs.com/api/1.0/',\r\n   headers: {\r\n      'API-KEY': \"81df0079-0492-4de1-a05f-7da3384208ab\"\r\n   },\r\n});\r\n\r\nexport const usersAPI = {\r\n   getUsers(currentPage: number = 1, pageSize: number = 5, term: string = '', friend: null | boolean = null) {\r\n      return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&term=${term}` + (friend == null ? '' : `&friend=${friend}`))\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n   followUser(id = 2) {\r\n      return instance.post<FollowType>(`follow/${id}`)\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n   unfollowUser(id = 2) {\r\n      return instance.delete<FollowType>(`follow/${id}`)\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n   getFiends(currentPage = 1, pageSize = 3) {\r\n      return instance.get<GetUsersType>(`users?page=${currentPage}&count=${pageSize}&friend=true`)\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n};\r\n\r\nexport const profileAPI = {\r\n   getProfile(userId: number) {\r\n      return instance.get<ProfileType>(`profile/${userId}`)\r\n   },\r\n   getStatus(userId: number) {\r\n      return instance.get<string>(`profile/status/${userId}`)\r\n   },\r\n   updateStatus(status: string) {\r\n      return instance.put<UpdateStatusType>(`profile/status`, { status });\r\n   },\r\n   getUsersForProfile() {\r\n      return instance.get<GetUsersType>(`users`)\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n   updatePhoto(photoFile: any) {\r\n      const formData = new FormData();\r\n      formData.append('image', photoFile)\r\n      return instance.put<UpdatePhotoType>(`profile/photo`, formData, {\r\n         headers: {\r\n            'Content-Type': 'multipart/form-data'\r\n         }\r\n      });\r\n   },\r\n   updateProfile(newData: ProfileType) {\r\n      return instance.put<UpdateProfileType>(`profile`, newData);\r\n   },\r\n};\r\n\r\nexport const authAPI = {\r\n   getUserData() {\r\n      return instance.get<GetUserDataType>(`auth/me`)\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n   getUserPhoto() {\r\n      return instance.get<GetPhotoDataType>(`profile/`)\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n   logInUser(email: string, password: string, rememberMe: boolean = false, captcha: string | null = null,) {\r\n      return instance.post<LogInUserType>(`auth/login`, { email, password, rememberMe, captcha })\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n   logOutUser() {\r\n      return instance.delete<LogOutUserType>(`auth/login`)\r\n         .then(response => {\r\n            return response.data;\r\n         })\r\n   },\r\n};\r\n\r\nexport const securityAPI = {\r\n   getCaptcha() {\r\n      return instance.get<GetCaptchaType>(`security/get-captcha-url`).then(response => {\r\n         return response.data\r\n      })\r\n   },\r\n};\r\n\r\nexport const dialogsAPI = {\r\n   startChatting(userId: number) {\r\n      return instance.put(`dialogs/${userId}`, userId).then(response => {\r\n         return response\r\n      })\r\n   },\r\n   getMessages(userId: number) {\r\n      return instance.get<any>(`dialogs/${userId}/messages`)\r\n         .then(response => {\r\n            return response.data\r\n         })\r\n   }\r\n}\r\n\r\n\r\n\r\n\r\nexport enum ResultCodeEnum {\r\n   Success = 0,\r\n   Error = 1,\r\n   CaptchaIsRequired = 10\r\n}\r\n\r\ntype GetUserDataType = {\r\n   data: {\r\n      id: number\r\n      email: string\r\n      login: string\r\n      captcha: string | null\r\n   }\r\n   resultCode: ResultCodeEnum\r\n   messages: Array<string>\r\n}\r\ntype GetPhotoDataType = {\r\n   data: PhotosType\r\n   resultCode: ResultCodeEnum\r\n   messages: Array<string>\r\n}\r\ntype LogInUserType = {\r\n   data: {\r\n      email: string\r\n      password: string\r\n      rememberMe: boolean\r\n      captcha: string | null\r\n   }\r\n   resultCode: ResultCodeEnum\r\n   messages: Array<string>\r\n}\r\ntype LogOutUserType = {\r\n   data: {}\r\n   resultCode: ResultCodeEnum\r\n   messages: Array<string>\r\n}\r\ntype UpdateStatusType = {\r\n   status: string\r\n   resultCode: ResultCodeEnum\r\n   messages: Array<string>\r\n}\r\ntype GetUsersType = {\r\n   error: null | string\r\n   items: Array<UsersType>\r\n   totalCount: number\r\n}\r\ntype FollowType = {\r\n   data: any\r\n   fieldsErrors: Array<any>\r\n   messages: Array<string>\r\n   resultCode: number\r\n}\r\ntype GetCaptchaType = {\r\n   url: string\r\n}\r\ntype UpdateProfileType = {\r\n   data: ProfileType\r\n   resultCode: ResultCodeEnum\r\n   messages: Array<string>\r\n}\r\ntype UpdatePhotoType = {\r\n   data: {\r\n      photos: PhotosType\r\n   }\r\n   resultCode: ResultCodeEnum\r\n   messages: Array<string>\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ldsDualRing\":\"Preloader_ldsDualRing__iMzi9\",\"wrapper\":\"Preloader_wrapper__kzYrf\"};","import { AppStateType } from \"../redux/redux-store\";\r\n\r\nexport const getProfile = (state: AppStateType) => {\r\n   return state.profilePage.profile\r\n};\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.profilePage.isFetching\r\n};\r\nexport const getUserStatus = (state: AppStateType) => {\r\n   return state.profilePage.status\r\n};\r\nexport const getPosts = (state: AppStateType) => {\r\n   return state.profilePage.posts\r\n};\r\n\r\nexport const getEditMode = (state: AppStateType) => {\r\n   return state.profilePage.editMode\r\n};\r\nexport const getLocalIsFetching = (state: AppStateType) => {\r\n   return state.profilePage.localIsFetching\r\n};\r\n\r\nexport const getProfileError = (state: AppStateType) => {\r\n   return state.profilePage.errorMessage\r\n};\r\n\r\nexport const getPhoto = (state: AppStateType) => {\r\n   return state.profilePage.ownerPhoto\r\n};","import { ThunkAction } from \"redux-thunk\";\r\nimport { dialogsAPI, ResultCodeEnum } from \"../api/api\";\r\nimport { AppStateType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\nexport type DialogsType = {\r\n   id: number\r\n   name: string\r\n}\r\nexport type MessagesType = {\r\n   id: number\r\n   name: string\r\n   message: string\r\n}\r\n\r\nlet initialState = {\r\n   dialogs: [\r\n      { id: 1, name: \"Billy\", },\r\n      { id: 2, name: \"Sergey\", },\r\n      { id: 3, name: \"Alex\", },\r\n   ] as Array<DialogsType>,\r\n   messages: [\r\n      { id: 1, name: \"Billy\", message: \"Oh shit Im sorry\" },\r\n      { id: 2, name: \"Alex\", message: \"Sorry fot what\" },\r\n   ] as Array<MessagesType>,\r\n   isFetching: false,\r\n};\r\n\r\n\r\ntype initialStateType = typeof initialState;\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n\r\nconst dialogsReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n   switch (action.type) {\r\n      case \"ADD_MESSAGE\": {\r\n         let newMessage = {\r\n            id: 4,\r\n            name: \"Dmitriy\",\r\n            message: action.message,\r\n         };\r\n         return {\r\n            ...state,\r\n            messages: [...state.messages, newMessage],\r\n         };\r\n      };\r\n      case 'SET_NEW_MESSAGES': {\r\n         return {\r\n            ...state,\r\n            dialogs: [...state.dialogs, action.data]\r\n         }\r\n      };\r\n      case 'TOGGLE_IS_FETCHING': {\r\n         return {\r\n            ...state,\r\n            isFetching: action.isFetching\r\n         }\r\n      };\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\n\r\n\r\nexport const actions = {\r\n   addMessageActionCreator: (message: string) => ({ type: 'ADD_MESSAGE', message } as const),\r\n   getNewMessages: (data: any) => ({ type: 'SET_NEW_MESSAGES', data } as const),\r\n   toggleIsFetching: (isFetching: boolean) => ({ type: 'TOGGLE_IS_FETCHING', isFetching } as const)\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\n\r\nexport const getAllMessages = (userId: number): ThunkType => async (dispatch) => {\r\n   try {\r\n      dispatch(actions.toggleIsFetching(true))\r\n      let data = await dialogsAPI.getMessages(userId)\r\n      if (data.resultCode == ResultCodeEnum.Success) {\r\n         console.log(data)\r\n      }\r\n   } catch (error) {\r\n      console.log(error)\r\n   } finally {\r\n      dispatch(actions.toggleIsFetching(false))\r\n   }\r\n\r\n}\r\nexport const startNewChat = (userId: number): ThunkType => async (dispatch) => {\r\n   try {\r\n      dispatch(actions.toggleIsFetching(true))\r\n      let data = await dialogsAPI.startChatting(userId)\r\n   } catch (error) {\r\n\r\n   } finally {\r\n      dispatch(actions.toggleIsFetching(false))\r\n   }\r\n\r\n}\r\n\r\nexport default dialogsReducer;","export default __webpack_public_path__ + \"static/media/error.d24ec31a.jpg\";","import { AppStateType } from \"../redux/redux-store\";\r\n\r\n\r\nexport const getErrorMessage = (state: AppStateType) => {\r\n   return state.errors.errorMessage\r\n}","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport errorIcon from '../../../assets/images/error.jpg';\r\nimport { actions } from '../../../redux/errors-reducer';\r\nimport { getErrorMessage } from '../../../selectors/error-selectors';\r\nimport s from './ErrorPopup.module.scss';\r\n\r\n\r\n\r\n\r\nconst ErrorPopup: React.FC = React.memo(() => {\r\n\r\n   const errorMessage = useSelector(getErrorMessage)\r\n   let dispatch = useDispatch()\r\n   let { deactivateMode } = actions\r\n\r\n   let onDeactivateMode = () => {\r\n      dispatch(deactivateMode())\r\n   }\r\n   let showError = errorMessage != null;\r\n   return (\r\n      <div className={showError ? s.wrapper : s.wrapperNone}>\r\n         <div className={s.wrapperBody}>\r\n            <div className={s.header}>\r\n               <h1 className={s.title}>Oops, something is wrong!</h1>\r\n               <div className={s.closeWrapper}><p className={s.close} onClick={onDeactivateMode}>x</p></div>\r\n            </div>\r\n            <div className={s.content}>\r\n               <h2 className={s.subtitle}>{errorMessage}</h2>\r\n               <div className={s.image}><img src={errorIcon} alt=\"\" /></div>\r\n            </div>\r\n         </div>\r\n      </div>\r\n   );\r\n})\r\n\r\n\r\n\r\nexport default ErrorPopup\r\n\r\n","export const updateObjectInArray = (items: Array<any>, itemId: number, objPropName: string, newObjProps: any) => {\r\n   return items.map(u => {\r\n      if (u[objPropName] === itemId) {\r\n         return { ...u, ...newObjProps }\r\n      };\r\n      return u;\r\n   });\r\n};","import { showError } from './errors-reducer';\r\nimport { updateObjectInArray } from '../utilits/object-helpers';\r\nimport { usersAPI, profileAPI } from '../api/api';\r\nimport { UsersType } from '../types/types';\r\nimport { AppStateType, InferActionsTypes } from './redux-store';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\n\r\ntype InitialStateType = typeof initialState\r\nexport type FilterTypes = typeof initialState.filter\r\ntype ActionTypes = InferActionsTypes<typeof actions>;\r\n\r\n\r\n\r\nlet initialState = {\r\n   users: [] as Array<UsersType>,\r\n   pageSize: 10,\r\n   totalUserCount: 0,\r\n   currentPage: 1,\r\n   isFetching: false,\r\n   isFollowing: [] as any,\r\n   filter: {\r\n      term: '',\r\n      friend: null as null | boolean\r\n   }\r\n};\r\n\r\nconst usersReducer = (state = initialState, action: ActionTypes): InitialStateType => {\r\n   switch (action.type) {\r\n      case 'FOLLOW':\r\n         return {\r\n            ...state,\r\n            users: updateObjectInArray(state.users, action.userId, 'id', { followed: true }),\r\n         };\r\n      case 'UN_FOLLOW':\r\n         return {\r\n            ...state,\r\n            users: updateObjectInArray(state.users, action.userId, 'id', { followed: false }),\r\n         };\r\n      case 'SET_USERS':\r\n         return {\r\n            ...state,\r\n            users: action.users,\r\n         };\r\n      case 'SET_PAGE':\r\n         return {\r\n            ...state, currentPage: action.currentPage,\r\n         };\r\n      case 'SET_TOTAL_COUNT':\r\n         return {\r\n            ...state, totalUserCount: action.totalCount,\r\n         };\r\n      case 'IS_FETCHING':\r\n         return {\r\n            ...state, isFetching: action.isFetching\r\n         };\r\n      case 'IS_FOLLOWING':\r\n         return {\r\n            ...state,\r\n            isFollowing: action.isFollowing\r\n               ? [...state.isFollowing, action.userId]\r\n               : state.isFollowing.filter((id: number) => id != action.userId)\r\n         };\r\n      case 'SET_FILTER':\r\n         return {\r\n            ...state, filter: action.filter\r\n         };\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\nexport const actions = {\r\n   follow: (userId: number) => ({ type: 'FOLLOW', userId } as const),\r\n   unfollow: (userId: number) => ({ type: 'UN_FOLLOW', userId } as const),\r\n   setUsers: (users: Array<UsersType>) => ({ type: 'SET_USERS', users } as const),\r\n   filterUsers: (filter: FilterTypes) => ({ type: 'SET_FILTER', filter } as const),\r\n   setPage: (currentPage: number) => ({ type: 'SET_PAGE', currentPage } as const),\r\n   setTotalCount: (totalCount: number) => ({ type: 'SET_TOTAL_COUNT', totalCount } as const),\r\n   toggleIsFetching: (isFetching: boolean) => ({ type: 'IS_FETCHING', isFetching } as const),\r\n   toggleIsFollowing: (isFollowing: boolean, userId: number) => ({ type: 'IS_FOLLOWING', isFollowing, userId } as const),\r\n}\r\n\r\n\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionTypes>\r\n\r\nconst followUnfollowFlow = async (dispatch: any, userId: number, apiMethod: any, actionCreator: any) => {\r\n   try {\r\n      dispatch(actions.toggleIsFollowing(true, userId));\r\n      let data = await apiMethod(userId)\r\n      if (data.resultCode == 0) {\r\n         dispatch(actionCreator(userId))\r\n      }\r\n      dispatch(actions.toggleIsFollowing(false, userId));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   }\r\n};\r\n\r\nexport const requestUsers = (currentPage: number, pageSize: number, filter: { term: string, friend: null | boolean }): ThunkType => async (dispatch) => {\r\n   try {\r\n      dispatch(actions.toggleIsFetching(true));\r\n      dispatch(actions.filterUsers(filter));\r\n      dispatch(actions.setPage(currentPage));\r\n      let data = await usersAPI.getUsers(currentPage, pageSize, filter.term, filter.friend);\r\n      dispatch(actions.setUsers(data.items));\r\n      dispatch(actions.setTotalCount(data.totalCount));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   } finally {\r\n      dispatch(actions.toggleIsFetching(false));\r\n   }\r\n};\r\n\r\nexport const followUsers = (userId: number): ThunkType => {\r\n   return async (dispatch: any) => {\r\n      try {\r\n         followUnfollowFlow(dispatch, userId, usersAPI.followUser.bind(usersAPI), actions.follow)\r\n      } catch (error: any) {\r\n         dispatch(showError(error.message));\r\n      }\r\n   }\r\n};\r\n\r\nexport const unfollowUsers = (userId: number): ThunkType => {\r\n   return async (dispatch) => {\r\n      try {\r\n         followUnfollowFlow(dispatch, userId, usersAPI.unfollowUser.bind(usersAPI), actions.unfollow)\r\n      } catch (error: any) {\r\n         dispatch(showError(error.message));\r\n      }\r\n   }\r\n};\r\n\r\n\r\nexport default usersReducer;","const subcribers = {\r\n    'messages-received': [] as MessagesReceivedSubscriberType[],\r\n    'status-changed': [] as StatusChangedSubscriberType[]\r\n}\r\n\r\nlet ws: WebSocket | null = null\r\ntype EventsNamesType = 'messages-received' | 'status-changed'\r\n\r\nconst closeHandler = () => {\r\n    notifySubscribersAboutStatus('pending')\r\n    setTimeout(createChannel, 3000)\r\n}\r\nconst messageHandler = (e: MessageEvent) => {\r\n    const newMessages = JSON.parse(e.data)\r\n    subcribers['messages-received'].forEach(s => s(newMessages))\r\n}\r\nconst openHandler = () => {\r\n    notifySubscribersAboutStatus('ready')\r\n}\r\nconst errorHandler = () => {\r\n    notifySubscribersAboutStatus('error')\r\n    console.error('REFRESH PAGE')\r\n}\r\nconst cleanUp = () => {\r\n    ws?.removeEventListener('close', closeHandler)\r\n    ws?.removeEventListener('message', messageHandler)\r\n    ws?.removeEventListener('open', openHandler)\r\n    ws?.removeEventListener('error', errorHandler)\r\n}\r\nconst notifySubscribersAboutStatus = (status: StatusType) => {\r\n    subcribers['status-changed'].forEach(s => s(status))\r\n}\r\n\r\nfunction createChannel() {\r\n    cleanUp()\r\n    ws?.close()\r\n    ws = new WebSocket('wss://social-network.samuraijs.com/handlers/ChatHandler.ashx')\r\n    notifySubscribersAboutStatus('pending')\r\n    ws.addEventListener('close', closeHandler)\r\n    ws.addEventListener('message', messageHandler)\r\n    ws.addEventListener('open', openHandler)\r\n    ws.addEventListener('error', errorHandler)\r\n}\r\n\r\n\r\nexport const chatAPI = {\r\n    start() {\r\n        createChannel()\r\n    },\r\n    stop() {\r\n        subcribers['messages-received'] = []\r\n        subcribers['status-changed'] = []\r\n        cleanUp()\r\n        ws?.close()\r\n    },\r\n    subscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName].push(callback)\r\n        return () => {\r\n            // @ts-ignore\r\n            subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n        }\r\n    },\r\n    unsubscribe(eventName: EventsNamesType, callback: MessagesReceivedSubscriberType | StatusChangedSubscriberType) {\r\n        // @ts-ignore\r\n        subcribers[eventName] = subcribers[eventName].filter(s => s !== callback)\r\n    },\r\n    sendMessage(message: string) {\r\n        ws?.send(message)\r\n    }\r\n}\r\n\r\ntype MessagesReceivedSubscriberType = (messages: ChatMessageAPIType[]) => void\r\ntype StatusChangedSubscriberType = (status: StatusType) => void\r\n\r\nexport type ChatMessageAPIType = {\r\n    message: string\r\n    photo: string\r\n    userId: number\r\n    userName: string\r\n}\r\nexport type StatusType = 'pending' | 'ready' | 'error'\r\n","import { AppStateType, InferActionsTypes } from './redux-store'\r\nimport { Dispatch } from 'redux'\r\nimport { chatAPI, ChatMessageAPIType, StatusType } from '../api/chat-api'\r\nimport { v1 as uuidv1 } from 'uuid';\r\nimport { ThunkAction } from 'redux-thunk';\r\n\r\n\r\ntype ChatMessageType = ChatMessageAPIType & { id: string }\r\n\r\nlet initialState = {\r\n    messages: [] as ChatMessageType[],\r\n    status: 'pending' as StatusType\r\n}\r\n\r\nconst chatReducer = (state = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'SN/chat/MESSAGES_RECEVIED':\r\n            return {\r\n                ...state,\r\n                messages: [...state.messages, ...action.payload.messages.map(m => ({ ...m, id: uuidv1() }))]\r\n                    .filter((m, index, array) => index >= array.length - 100)\r\n            }\r\n        case 'SN/chat/STATUS_CHANGED':\r\n            return {\r\n                ...state,\r\n                status: action.payload.status\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const actions = {\r\n    messagesReceived: (messages: ChatMessageAPIType[]) => ({\r\n        type: 'SN/chat/MESSAGES_RECEVIED', payload: { messages }\r\n    } as const),\r\n    statusChanged: (status: StatusType) => ({\r\n        type: 'SN/chat/STATUS_CHANGED', payload: { status }\r\n    } as const)\r\n}\r\n\r\nlet _newMessageHandler: ((messages: ChatMessageAPIType[]) => void) | null = null\r\nconst newMessageHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_newMessageHandler === null) {\r\n        _newMessageHandler = (messages) => {\r\n            dispatch(actions.messagesReceived(messages))\r\n        }\r\n    }\r\n    return _newMessageHandler\r\n}\r\n\r\nlet _statusChangedHandler: ((status: StatusType) => void) | null = null\r\nconst statusChangedHandlerCreator = (dispatch: Dispatch) => {\r\n    if (_statusChangedHandler === null) {\r\n        _statusChangedHandler = (status) => {\r\n            dispatch(actions.statusChanged(status))\r\n        }\r\n    }\r\n    return _statusChangedHandler\r\n}\r\n\r\nexport const startMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.start()\r\n    chatAPI.subscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.subscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n\r\n}\r\nexport const stopMessagesListening = (): ThunkType => async (dispatch) => {\r\n    chatAPI.unsubscribe('messages-received', newMessageHandlerCreator(dispatch))\r\n    chatAPI.unsubscribe('status-changed', statusChangedHandlerCreator(dispatch))\r\n    chatAPI.stop()\r\n}\r\n\r\nexport const sendMessage = (message: string): ThunkType => async (dispatch) => {\r\n    chatAPI.sendMessage(message)\r\n}\r\n\r\n\r\nexport default chatReducer\r\n\r\nexport type InitialStateType = typeof initialState;\r\ntype ActionsType = InferActionsTypes<typeof actions>\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsType>\r\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { AppStateType, InferActionsTypes } from \"./redux-store\";\r\n\r\n\r\n\r\nlet initialState = {\r\n   errorMessage: null as string | null,\r\n   errorsMode: true,\r\n};\r\ntype initialStateType = typeof initialState;\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n\r\nconst errorsReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n   switch (action.type) {\r\n      case \"ON_MODE\":\r\n         return {\r\n            ...state,\r\n            errorsMode: true,\r\n            errorMessage: action.errorMessage,\r\n         };\r\n      case \"OFF_MODE\":\r\n         return {\r\n            ...state,\r\n            errorsMode: false,\r\n            errorMessage: null,\r\n         };\r\n      default:\r\n         return state;\r\n   }\r\n};\r\n\r\n\r\nexport const actions = {\r\n   activateMode: (errorMessage: string | null) => ({ type: 'ON_MODE', errorMessage } as const),\r\n   deactivateMode: () => ({ type: 'OFF_MODE' } as const)\r\n}\r\n\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>\r\n\r\nexport const showError = (errorMessage: string | null): ThunkType => (dispatch) => {\r\n   dispatch(actions.activateMode(errorMessage));\r\n};\r\n\r\nexport default errorsReducer;","import * as React from 'react';\r\n\r\n\r\nconst ProfileContainer = React.lazy(() => import('../components/Profile/ProfileContainer'));\r\nconst DialogsContainer = React.lazy(() => import('../components/Dialogs/DialogsContainer'));\r\nconst UsersContainer = React.lazy(() => import('../components/Users/UsersContainer'));\r\nconst LoginContainer = React.lazy(() => import('../components/Login/Login'));\r\nconst ChatPage = React.lazy(() => import('../components/Chat/ChatPage'));\r\n\r\nexport type RouteType = {\r\n   path: string\r\n   component: any\r\n   exact?: boolean\r\n}\r\n\r\nexport const privateRoutes: Array<RouteType> = [\r\n   { path: '/profile/:userId?', component: ProfileContainer, exact: true },\r\n   { path: '/dialogs', component: DialogsContainer, exact: false },\r\n   { path: '/users', component: UsersContainer, exact: false },\r\n   { path: '/chat', component: ChatPage, exact: false },\r\n]\r\n\r\nexport const publicRoutes: Array<RouteType> = [\r\n   { path: '/login', component: LoginContainer, exact: false },\r\n   { path: '/users', component: UsersContainer, exact: false },\r\n   { path: '/profile/:userId', component: ProfileContainer, exact: true },\r\n]","import React, { Suspense } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Switch } from 'react-router';\r\nimport { Redirect, Route } from 'react-router-dom';\r\nimport Preloader from '../../components/common/Preloader/Preloader';\r\nimport { privateRoutes, publicRoutes } from '../../router/router';\r\nimport { getIsAuth } from '../../selectors/auth-selectors';\r\n\r\n\r\nconst AppRoutes: React.FC = () => {\r\n   const isAuth = useSelector(getIsAuth)\r\n\r\n   return (\r\n      isAuth\r\n         ? <Suspense fallback={<Preloader />}>\r\n            <Switch>\r\n               {privateRoutes.map(route =>\r\n                  <Route\r\n                     exact={route.exact}\r\n                     path={route.path}\r\n                     component={route.component}\r\n                     key={route.path}\r\n                  />)}\r\n               <Redirect to='/profile' />\r\n            </Switch>\r\n         </Suspense>\r\n\r\n         : <Suspense fallback={<Preloader />}>\r\n            <Switch>\r\n               {publicRoutes.map(route =>\r\n                  <Route\r\n                     exact={route.exact}\r\n                     path={route.path}\r\n                     component={route.component}\r\n                     key={route.path}\r\n                  />)}\r\n               <Redirect to='/login' />\r\n            </Switch>\r\n         </Suspense>\r\n   )\r\n}\r\n\r\nexport default AppRoutes\r\n","export default __webpack_public_path__ + \"static/media/logo.fcb582b0.png\";","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport logo from '../../../src/assets/images/logo.png';\nimport userPhoto from '../../assets/images/user.png';\nimport { authUserLogOut } from '../../redux/auth-reducer';\nimport { getOwnerPhoto } from '../../redux/profile-reducer';\nimport { getIsAuth, getLogin, getUserId } from '../../selectors/auth-selectors';\nimport { getPhoto } from '../../selectors/profile-selectors';\nimport s from './Header.module.scss';\n\ntype PropsType = {\n  isAuth: boolean\n  login: string | null\n  ownerPhoto: string | null\n  authUserLogOut: () => void\n}\n\n\nexport const HeaderContainer: React.FC = React.memo(() => {\n  const isAuth = useSelector(getIsAuth)\n  const login = useSelector(getLogin)\n  const authId = useSelector(getUserId)\n  const ownerPhoto = useSelector(getPhoto)\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    if (authId == null) {\n      return;\n    }\n    dispatch(getOwnerPhoto(authId))\n  }, []);\n\n  let onLogOutUser = () => {\n    dispatch(authUserLogOut());\n  }\n\n  return (\n    <Header\n      ownerPhoto={ownerPhoto}\n      isAuth={isAuth}\n      login={login}\n      authUserLogOut={onLogOutUser}\n    />\n  )\n})\n\n\nconst Header: React.FC<PropsType> = React.memo((props) => {\n  const { isAuth, login, authUserLogOut, ownerPhoto } = props\n\n\n  return (\n    <header className={s.header}>\n      <div className={s.container}>\n        <div className={s.headerBody}>\n          <div className={s.logo}>\n            <div><img src={logo} alt=\"logo\" /></div>\n            <p>SamuraiNetwork</p>\n          </div>\n          <div className={s.loginBlock}>\n            {isAuth ?\n              <div className={s.login_wrapper}>\n                <div className={s.login_ava}>\n                  <img src={ownerPhoto || userPhoto} />\n                </div>\n                <p className={s.login}>{login}</p>\n                <button onClick={authUserLogOut} className={s.btn}>Log Out</button>\n              </div>\n              : <Link to={'/login'}>Log In</Link>}\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n})\n\n\n\n\n","import { ThunkAction } from \"redux-thunk\";\r\nimport { usersAPI } from \"../api/api\";\r\nimport { UsersType } from \"../types/types\";\r\nimport { showError } from \"./errors-reducer\";\r\nimport { AppStateType, InferActionsTypes } from \"./redux-store\";\r\nimport { CommentOutlined, MessageOutlined, TeamOutlined, UserOutlined } from '@ant-design/icons';\r\n\r\n\r\nexport type LinksType = {\r\n   id: number\r\n   address: string\r\n   name: string\r\n   icon: any\r\n}\r\n\r\nlet initialState = {\r\n   links: [\r\n      { id: 1, address: \"profile\", name: \"Profile\", icon: UserOutlined },\r\n      { id: 2, address: \"dialogs\", name: \"Dialogs\", icon: MessageOutlined },\r\n      { id: 3, address: \"chat\", name: \"Chat\", icon: CommentOutlined },\r\n      { id: 4, address: \"users\", name: \"Users\", icon: TeamOutlined },\r\n   ] as Array<LinksType>,\r\n   friends: [] as Array<UsersType>,\r\n   pageSize: 3,\r\n   totalUserCount: 0,\r\n   currentPage: 1,\r\n   isFetching: false\r\n};\r\n\r\ntype initialStateType = typeof initialState\r\n\r\ntype ActionsTypes = InferActionsTypes<typeof actions>\r\n\r\n\r\nconst sidebarReducer = (state = initialState, action: ActionsTypes): initialStateType => {\r\n   switch (action.type) {\r\n      case \"SET_FRIENDS\": {\r\n         return {\r\n            ...state,\r\n            friends: action.friends\r\n         }\r\n      };\r\n      case 'SET_PAGE':\r\n         return {\r\n            ...state, currentPage: action.currentPage,\r\n         };\r\n      case 'SET_TOTAL_COUNT':\r\n         return {\r\n            ...state, totalUserCount: action.totalCount,\r\n         };\r\n      case 'SET_IS_FETCHING':\r\n         return {\r\n            ...state, isFetching: action.isFetching,\r\n         };\r\n      default:\r\n         return state\r\n   }\r\n}\r\n\r\n\r\nexport const actions = {\r\n   setFriends: (friends: Array<UsersType>) => ({ type: 'SET_FRIENDS', friends } as const),\r\n   setPage: (currentPage: number) => ({ type: 'SET_PAGE', currentPage } as const),\r\n   setTotalCount: (totalCount: number) => ({ type: 'SET_TOTAL_COUNT', totalCount } as const),\r\n   setIsFetching: (isFetching: boolean) => ({ type: 'SET_IS_FETCHING', isFetching } as const),\r\n}\r\n\r\ntype ThunkType = ThunkAction<Promise<void>, AppStateType, unknown, ActionsTypes>\r\n\r\nexport const requestFriends = (currentPage: number, pageSize: number): ThunkType => async (dispatch) => {\r\n   try {\r\n      dispatch(actions.setIsFetching(true));\r\n      let data = await usersAPI.getFiends(currentPage, pageSize);\r\n      dispatch(actions.setFriends(data.items));\r\n      dispatch(actions.setTotalCount(data.totalCount));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   } finally {\r\n      dispatch(actions.setIsFetching(false));\r\n   }\r\n};\r\nexport const setFriendsPage = (p: number, pageSize: number): ThunkType => async (dispatch) => {\r\n   try {\r\n      dispatch(actions.setIsFetching(true));\r\n      dispatch(actions.setPage(p));\r\n      let data = await usersAPI.getFiends(p, pageSize);\r\n      dispatch(actions.setFriends(data.items));\r\n   } catch (error: any) {\r\n      dispatch(showError(error.message));\r\n   } finally {\r\n      dispatch(actions.setIsFetching(false));\r\n   }\r\n};\r\n\r\nexport default sidebarReducer;","import { AppStateType } from \"../redux/redux-store\";\r\n\r\nexport const getLinks = (state: AppStateType) => {\r\n   return state.sidebar.links\r\n};\r\nexport const getFriends = (state: AppStateType) => {\r\n   return state.sidebar.friends\r\n};\r\n\r\nexport const getPageSize = (state: AppStateType) => {\r\n   return state.sidebar.pageSize\r\n};\r\n\r\nexport const getCurrentPage = (state: AppStateType) => {\r\n   return state.sidebar.currentPage\r\n};\r\n\r\nexport const getTotalUserCount = (state: AppStateType) => {\r\n   return state.sidebar.totalUserCount\r\n};\r\n\r\nexport const getIsFetching = (state: AppStateType) => {\r\n   return state.sidebar.isFetching\r\n}","import React from 'react';\r\nimport s from './Preloader.module.scss'\r\n\r\n\r\nconst MiniPreloader: React.FC = React.memo(() => {\r\n   return (\r\n      <div className={s.wrapper}>\r\n         <div className={s.ldsDualRing}></div>\r\n      </div>\r\n   );\r\n})\r\n\r\nexport default MiniPreloader;","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport userPhoto from '../../../assets/images/user.png';\r\nimport { UsersType } from '../../../types/types';\r\nimport MiniPreloader from '../../common/MiniPreloader/Preloader';\r\nimport s from './Friends.module.scss';\r\n\r\n\r\ntype FriendsPropsType = {\r\n   friends: [] | Array<UsersType>\r\n   isFetching: boolean\r\n}\r\ntype FriendPropsType = {\r\n   name: string\r\n   id: number\r\n   photo: any\r\n}\r\n\r\n\r\nexport const Friends: React.FC<FriendsPropsType> = React.memo((props) => {\r\n   const { friends, isFetching } = props\r\n   let friendsElements = friends.map(f => <Friend key={f.id} name={f.name} photo={f.photos.small} id={f.id} />)\r\n   return (\r\n      <div className={s.friends}>\r\n         <h2 className={s.title}>Friends</h2>\r\n         <div className={s.flex}>\r\n            {isFetching ? <MiniPreloader /> : friendsElements}\r\n         </div>\r\n      </div >\r\n   );\r\n})\r\n\r\nconst Friend: React.FC<FriendPropsType> = React.memo((props) => {\r\n   const { name, id, photo } = props\r\n   return (\r\n      <div className={s.friend}>\r\n         <Link className={s.icon} to={'/profile/' + id}>\r\n            <img src={photo ? photo : userPhoto} alt=\"\" />\r\n         </Link>\r\n         <p className={s.name}>{name}</p>\r\n      </div>\r\n   );\r\n})\r\n\r\n","import React, { Component } from 'react';\r\nimport s from '../Sidebar.module.scss'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\ntype PropsType = {\r\n   address: string\r\n   name: string\r\n   icon: any\r\n}\r\n\r\nexport const Menu_link: React.FC<PropsType> = React.memo((props) => {\r\n   const { address, name } = props\r\n   let path = \"/\" + address;\r\n   return (\r\n      <li className={s.sidebar__link}>\r\n         <span className={s.icon}>{<props.icon />}</span>\r\n         <NavLink to={path} className={s.link} activeClassName={s.active}>{name}</NavLink>\r\n      </li>\r\n   );\r\n})\r\n\r\n\r\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LinksType, requestFriends } from '../../redux/sidebar-reducer';\nimport { getIsAuth } from '../../selectors/auth-selectors';\nimport { getCurrentPage, getFriends, getIsFetching, getLinks, getPageSize } from '../../selectors/sidebar-selectors';\nimport { UsersType } from '../../types/types';\nimport { Friends } from './Friends/Friends';\nimport { Menu_link } from './Menu_link/Menu_link';\nimport s from './Sidebar.module.scss';\n\ntype PropsType = {\n  links: [] | Array<LinksType>\n  friends: [] | Array<UsersType>\n  isAuth: boolean,\n  isFetching: boolean\n}\n\n\nexport const SidebarContainer: React.FC = React.memo(() => {\n  const links = useSelector(getLinks)\n  const friends = useSelector(getFriends)\n  const isAuth = useSelector(getIsAuth)\n  const isFetching = useSelector(getIsFetching)\n  const currentPage = useSelector(getCurrentPage)\n  const pageSize = useSelector(getPageSize)\n  const dispatch = useDispatch()\n\n  useEffect(() => {\n    dispatch(requestFriends(currentPage, pageSize))\n  }, []);\n\n  return (\n    <Sidebar\n      links={links}\n      friends={friends}\n      isAuth={isAuth}\n      isFetching={isFetching}\n    />\n  )\n})\n\n\nconst Sidebar: React.FC<PropsType> = React.memo((props) => {\n  let menuElements = props.links.map((l: LinksType) => <Menu_link key={l.id} name={l.name} address={l.address} icon={l.icon} />)\n  return (\n    <nav className={s.Sidebar}>\n      <ul className={s.Sidebar__list}>\n        {menuElements}\n      </ul>\n      {props.isAuth && <Friends\n        isFetching={props.isFetching}\n        friends={props.friends}\n      />}\n    </nav >\n  );\n})","import { ThunkAction } from 'redux-thunk';\r\nimport { authUserData } from './auth-reducer';\r\nimport { showError } from './errors-reducer';\r\nimport { AppStateType, InferActionsTypes } from './redux-store';\r\n\r\n\r\nlet initialState = {\r\n   initialized: false,\r\n};\r\ntype initialStateType = typeof initialState\r\n\r\ntype ActionTypes = InferActionsTypes<typeof actions>\r\n\r\nconst appReducer = (state = initialState, action: ActionTypes): initialStateType => {\r\n   switch (action.type) {\r\n      case 'INITIALIZED_SUCCESS': {\r\n         return {\r\n            ...state,\r\n            initialized: true,\r\n         };\r\n      };\r\n      default:\r\n         return state;\r\n   };\r\n};\r\n\r\n\r\nexport const actions = {\r\n   setInitialized: () => ({ type: 'INITIALIZED_SUCCESS' } as const),\r\n}\r\n\r\n\r\n\r\ntype ThunkType = ThunkAction<void, AppStateType, unknown, ActionTypes>\r\n\r\nexport const initializedApp = (): ThunkType => {\r\n   return (dispatch) => {\r\n      try {\r\n         let promise = dispatch(authUserData());\r\n         Promise.all([promise])\r\n            .then(() => {\r\n               dispatch(actions.setInitialized());\r\n            });\r\n      } catch (error: any) {\r\n         dispatch(showError(error.message));\r\n      }\r\n   }\r\n};\r\n\r\n\r\nexport default appReducer;","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { withRouter } from 'react-router';\r\nimport { compose } from 'redux';\r\nimport './assets/styles/App.scss';\r\nimport AppRoutes from './components/AppRoutes/AppRoutes';\r\nimport ErrorPopup from './components/common/ErrorPopup/ErrorPopup';\r\nimport Preloader from './components/common/Preloader/Preloader';\r\nimport { HeaderContainer } from './components/Header/Header';\r\nimport { SidebarContainer } from './components/Sidebar/Sidebar';\r\nimport { initializedApp } from './redux/app-reducer';\r\nimport { getInitialized } from './selectors/auth-selectors';\r\n\r\n\r\n\r\nconst App: React.FC = () => {\r\n  const initialized = useSelector(getInitialized)\r\n  let dispatch = useDispatch()\r\n\r\n  useEffect(() => {\r\n    dispatch(initializedApp())\r\n  }, []);\r\n\r\n  if (!initialized) {\r\n    return <Preloader />\r\n  }\r\n\r\n  return (\r\n    <div className='App'>\r\n      <HeaderContainer />\r\n      <SidebarContainer />\r\n      <div className=\"app__wrapper_content\">\r\n        <AppRoutes />\r\n      </div>\r\n      <ErrorPopup />\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n  withRouter,\r\n)(App)","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { applyMiddleware, combineReducers, createStore } from \"redux\";\r\nimport profileReducer from './profile-reducer';\r\nimport dialogsReducer from './dialogs-reducer';\r\nimport sidebarReducer from './sidebar-reducer';\r\nimport usersReducer from './users-reducer';\r\nimport authReducer from \"./auth-reducer\";\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport appReducer from './app-reducer';\r\nimport errorsReducer from './errors-reducer';\r\nimport chatReducer from \"./chat-reducer\";\r\n\r\n\r\nlet rootReducer = combineReducers({\r\n   profilePage: profileReducer,\r\n   dialogsPage: dialogsReducer,\r\n   sidebar: sidebarReducer,\r\n   usersPage: usersReducer,\r\n   auth: authReducer,\r\n   app: appReducer,\r\n   errors: errorsReducer,\r\n   chat: chatReducer,\r\n});\r\n\r\ntype RootReducerType = typeof rootReducer;\r\nexport type AppStateType = ReturnType<RootReducerType>\r\n\r\n\r\ntype PropertiesTypes<T> = T extends { [key: string]: infer U } ? U : never;\r\nexport type InferActionsTypes<T extends { [key: string]: (...args: any[]) => any }> = ReturnType<PropertiesTypes<T>>\r\n\r\nlet store = createStore(rootReducer, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './assets/styles/index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nimport store from './redux/redux-store'\r\nimport { BrowserRouter } from 'react-router-dom';\r\nimport { Provider } from 'react-redux'\r\n\r\n\r\nReactDOM.render(\r\n   <BrowserRouter>\r\n      <Provider store={store}>\r\n         <App />\r\n      </Provider>\r\n   </BrowserRouter>,\r\n   document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n\r\n"],"sourceRoot":""}